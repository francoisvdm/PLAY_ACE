BROKER SCHEMA V1_0

DECLARE nsSer NAMESPACE 'http://standardbank.co.za/sa/services/Business/SalesAndMarketing/ServiceRequestManagementSRVV1_0';
DECLARE IFXBase NAMESPACE 'http://standardbank.co.za/sa/services/Global/IfxV2_2/BaseV1_0';
DECLARE IFXSbsa NAMESPACE 'http://standardbank.co.za/sa/services/Global/IfxV2_2/SbsaV1_0';
DECLARE nsSoap NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
DECLARE accLoc NAMESPACE 'http://standardbank.co.za/sa/services/Support/ServicingAndDistribution/AccountLocatorV2/Base';
DECLARE nsDEA NAMESPACE 'http://IDX.IBIDXService/V1';
DECLARE IFXHeader NAMESPACE 'http://standardbank.co.za/sa/services/Global/IfxV2_1/HeaderV2_0';
DECLARE bas NAMESPACE 'http://esbdpd01.standardbank.co.za:9001/sa/services/support/servicinganddistribution/accountlocatorv2';
DECLARE ns NAMESPACE 'http://gateway.ecm.enterprise.mca.sbsa.com/';
DECLARE ns8 NAMESPACE 'http://IDX.FaultService/V1';
DECLARE ns9 NAMESPACE 'http://IDX.SBIDXService/V1';
DECLARE nsMsg NAMESPACE 'http://standardbank.co.za/sa/services/global/CentralMessagingV2';
DECLARE nsCust NAMESPACE 'http://standardbank.co.za/sa/services/Information/businessPartner/CustomerManagementV2/elements';
DECLARE nsTech NAMESPACE 'http://standardbank.co.za/sa/services/global/tech';
DECLARE nsGlob NAMESPACE 'http://sap.com/xi/CRM/Global2';
DECLARE nsUrn NAMESPACE 'urn:sbsa.com:common.sap:header';
DECLARE nsUrn1 NAMESPACE 'urn:sbsa.com:sap.bp:change_bp';
DECLARE NsStatements NAMESPACE 'http://standardbank.co.za/sa/services/Support/communication/StatementV2/elements';
DECLARE MAXPAGENO EXTERNAL CHARACTER '10';
DECLARE BUS_UNIT EXTERNAL CHARACTER ' ';
DECLARE TEMPLATEN EXTERNAL CHARACTER '00157254';
DECLARE TEMPLATEE EXTERNAL CHARACTER '00158033';
DECLARE OUBPID EXTERNAL CHARACTER 'OU50003529s';

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buidServRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Create Header structure
		DECLARE envHeader REFERENCE TO Environment.messages.DEA.nsSoap:Header.nsDEA:IDXHeader;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsSer:CreateServiceRequest;
		DECLARE outServRqHeader REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsSer:CreateServiceRequest;

		SET outServRqHeader.IFXHeader:RqUID = UUIDASCHAR;

		CREATE LASTCHILD OF outServRqHeader AS outServRqHeader TYPE Name NAMESPACE IFXHeader NAME 'MsgRqHdr';

		SET outServRqHeader.IFXHeader:SvcIdent.IFXHeader:SvcProviderName = 'ESB';
		SET outServRqHeader.IFXHeader:SvcIdent.IFXHeader:SvcName = 'ServiceRequestManagementV1_0';

		CREATE LASTCHILD OF outServRqHeader AS outServRqHeader TYPE Name NAMESPACE IFXHeader NAME 'ContextRqHdr';

		SET outServRqHeader.IFXHeader:ClientTerminalSeqNum = 'trofimov';
		SET outServRqHeader.IFXHeader:NetworkTrnData.IFXHeader:NetworkOwner = 'BranchStaff';
		SET outServRqHeader.IFXHeader:NetworkTrnData.IFXHeader:OriginatorName = 'MCA-Branch';
		SET outServRqHeader.IFXHeader:NetworkTrnData.IFXHeader:AcquirerIdent = 'DEA_USR';
		SET outServRqHeader.IFXHeader:NetworkTrnData.IFXHeader:ContentTypeXSB = 'TEXT/XML';
		SET outServRqHeader.IFXHeader:NetworkTrnData.IFXHeader:InterfaceNameXSB = 'MCAF';
		SET outServRqHeader.IFXHeader:ClientDt = CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss');
		SET outServRqHeader.IFXHeader:ClientApp.IFXHeader:Org = 'PBBSA';
		SET outServRqHeader.IFXHeader:ClientApp.IFXHeader:Name = '043';
		SET outServRqHeader.IFXHeader:ClientApp.IFXHeader:Version = '0001';
		SET outServRqHeader.IFXHeader:ClientApp.IFXHeader:SrcSystemXSB = '003';
		
		--V + F User story: same ID to support tracing. New generated UUID
		SET outServRqHeader.IFXHeader:MsgGroupReference = Environment.Trace.TraceID;
		--create body
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsSer:CreateServiceRequest;
		DECLARE outServRqBody REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsSer:CreateServiceRequest;
		CREATE LASTCHILD OF outServRqBody AS outServRqBody TYPE Name NAMESPACE nsSer NAME 'ServiceRequestInfo';

		SET outServRqBody.IFXBase:Desc = 'Record of IDX Statement Disclosure';
		SET outServRqBody.nsSer:ImpactCode = '01';
		SET outServRqBody.nsSer:ServiceRequestPartyInfo[1].nsSer:RelPartyRole = 'PF0001';
		SET outServRqBody.nsSer:ServiceRequestPartyInfo[1].IFXBase:PartyId =Environment.AccountDetails.customerNo;
		SET outServRqBody.nsSer:ServiceRequestPartyInfo[2].nsSer:RelPartyRole = 'PF0045';
		SET outServRqBody.nsSer:ServiceRequestPartyInfo[2].IFXBase:PartyId = '0150213749';--mapBankId('DEA_BANK_C', 'BP_N',
		--CAST(envHeader.nsDEA:InitiatingBank AS CHARACTER), FALSE);
		SET outServRqBody.nsSer:ServiceRequestPartyInfo[3].nsSer:RelPartyRole = 'PF0008';
		SET outServRqBody.nsSer:ServiceRequestPartyInfo[3].IFXBase:PartyId = '0150213749';
		--mapBankId('DEA_BANK_C', 'BP_N', CAST(envHeader.nsDEA:InitiatingBank AS CHARACTER), FALSE);
		SET outServRqBody.nsSer:ServiceRequestPartyInfo[4].nsSer:RelPartyRole = 'PF0009';
		SET outServRqBody.nsSer:ServiceRequestPartyInfo[4].IFXBase:PartyId =OUBPID;
		SET outServRqBody.nsSer:TimePointTerms.nsSer:TimePointRoleCode = '004';
		SET outServRqBody.nsSer:TimePointTerms.nsSer:DateTime = CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'yyyy-MM-dd''T''HH:mm:ss');
		SET outServRqBody.nsSer:PriorityCode = '40';
		SET outServRqBody.nsSer:ServiceRequestCategory.nsSer:ServiceTreeId = 'Z_SBSA_QC_SERVICE_TREE_V4';
		SET outServRqBody.nsSer:ServiceRequestCategory.nsSer:CategoryId = 'E042';
		SET outServRqBody.nsSer:ServiceRequestCategory.nsSer:CategoryDesc = 'Record of IDX Statement Disclosure';
		SET outServRqBody.nsSer:ServiceRequestCategory.nsSer:CatalogueType = 'D';
		SET outServRqBody.nsSer:ServiceRequestReference.IFXSbsa:ReferenceID = envHeader.nsDEA:IDXReference;
		SET outServRqBody.nsSer:ServiceRequestReference.nsSer:ReferenceTypeCode = '001'; --changed
		SET outServRqBody.nsSer:TextCollection.nsSer:TextTypeCode = '001';
		SET outServRqBody.nsSer:TextCollection.nsSer:TextContent = 'Statement requested by bank: ' || 'ABSA' || ' from banking unit: ' || 'ABSA Cheque Account - BOC' || 'IDX reference number: ' || envHeader.nsDEA:IDXReference;
		
--		--'Statement requested by bank: ' || CAST(mapBankId('DEA_BANK_C',
--		--'DEA_BANK_X', CAST(envHeader.nsDEA:InitiatingBank AS CHARACTER), FALSE)
--		--AS CHARACTER) || ' from banking unit: ' || mapBusUnit('DEA_PD_C',
--		--'DEA_PD_X', CAST(envHeader.nsDEA:BusinessUnit AS CHARACTER),FALSE) ||
--		--'. IDX reference number: ' || envHeader.nsDEA:IDXReference;

		MOVE outServRqBody PARENT;
		CREATE LASTCHILD OF outServRqBody AS outServRqBody TYPE Name NAMESPACE nsSer NAME 'ServiceRequestStatus';
		SET outServRqBody.nsSer:LifeCycleStatusCode = '3';
		SET outServRqBody.nsSer:UserStatus.nsSer:StatusCode = '0022';
		SET outServRqBody.nsSer:UserStatus.nsSer:ActiveInd = 'true';
		
		SET OutputLocalEnvironment = InputLocalEnvironment;
		

	END;
END MODULE;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buildAccLoc
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE inHeader REFERENCE TO InputRoot.MRM.nsSoap:Header.nsDEA:IDXHeader;
		DECLARE inBody REFERENCE TO InputRoot.MRM.nsSoap:Body.nsDEA:Submit.nsDEA:request;
		--Save DEA request message
		SET Environment.messages.DEA = InputRoot.MRM;
		SET Environment.AccountDetails.AccountNumber = inBody.nsDEA:BankAccount;
		CREATE FIELD Environment.messages.errorCode;
		DECLARE errorC REFERENCE TO Environment.messages.errorCode;
		CREATE FIELD Environment.messages.errorMsg;
		DECLARE errorMsg REFERENCE TO Environment.messages.errorMsg;

		CALL validateIncoming(inHeader,inBody,errorC,errorMsg,Environment);

		SET OutputRoot.Properties.Encoding = 546;
		SET OutputRoot.Properties.CodedCharSetId = 1208;
		--Build Account Locator call
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.accLoc:GetAccountLocation.IFXHeader:RqUID;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.accLoc:GetAccountLocation.IFXHeader:MsgRqHdr;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.accLoc:GetAccountLocation.accLoc:AcctLocatorGetSel;

		DECLARE outAccLocBody REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.accLoc:GetAccountLocation.accLoc:AcctLocatorGetSel;
		DECLARE outAccLocHeader REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.accLoc:GetAccountLocation;

		SET outAccLocHeader.IFXHeader:RqUID=UUIDASCHAR;

		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:SvcIdent.IFXHeader:SvcProviderName = 'ESB';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:ClientTerminalSeqNum = 'SYSTEM';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:NetworkTrnData.IFXHeader:NetworkOwner = 'DEA';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:NetworkTrnData.IFXHeader:AcquirerIdent = 'DEA_USR';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:NetworkTrnData.IFXHeader:ContentTypeXSB = 'TEXT/XML';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:NetworkTrnData.IFXHeader:InterfaceNameXSB = 'ESB';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:ClientDt = CURRENT_TIMESTAMP;
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:ClientApp.IFXHeader:Org = 'PBBSA';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:ClientApp.IFXHeader:Name = '043';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:ClientApp.IFXHeader:Version = '0001';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:ClientApp.IFXHeader:SrcSystemXSB = '002';
		SET outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:MsgGroupReference = UUIDASCHAR;
		
		--V + F User story: same ID to support tracing.
		SET Environment.Trace.TraceID = outAccLocHeader.IFXHeader:MsgRqHdr.IFXHeader:ContextRqHdr.IFXHeader:MsgGroupReference;

		SET outAccLocBody.accLoc:AcctKeys.accLoc:AcctIdent.IFXBase:AcctIdentValue =inBody.nsDEA:BankAccount;
		SET outAccLocBody.accLoc:AcctKeys.accLoc:AcctSerialNumValue='0';
		
		SET Environment.localenv = InputLocalEnvironment;

	END;
END MODULE;

CREATE PROCEDURE validateIncoming (INOUT inHeader REFERENCE, INOUT inBody REFERENCE,INOUT errorC REFERENCE,INOUT errorMsg REFERENCE, IN env REFERENCE)
BEGIN

	DECLARE envHeader REFERENCE TO env.messages.DEA.nsSoap:Header.nsDEA:IDXHeader;
	--validate nul values
	IF checkValue(inHeader.nsDEA:InitiatingBank) THEN
		SET errorC='1';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('1', 'InitiatingBank is null. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	ELSEIF checkValue(inBody.nsDEA:BankAccount) THEN
		SET errorC='2';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('2', 'BankAccount is null. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	ELSEIF checkValue(inBody.nsDEA:PhysicalEntity.nsDEA:Entity.nsDEA:IdentificationNo) THEN
		SET errorC='4';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('4', 'IdentificationNo is null. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	ELSEIF checkValue(inBody.nsDEA:MonthsBankStatements) AND checkValue(inBody.nsDEA:StatementRange) THEN
		SET errorC='4';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('4', 'MonthsBankStatements and StatementRange is null. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	-- validate bankid
	SET env.messages.bankName = 'ABSA';--mapBankId('DEA_BANK_C', 'DEA_BANK_X', CAST(inHeader.nsDEA:InitiatingBank AS CHARACTER), FALSE);
	IF env.messages.bankName = '0' OR env.messages.bankName IS NULL THEN
		SET errorC='1';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('1', 'Reqesting Bank not Allowed ' || CAST(inHeader.nsDEA:InitiatingBank AS CHARACTER) || '. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	SET env.messages.busUnit = 'ABSA Cheque Account - BOC';--mapBusUnit('DEA_PD_C', 'DEA_PD_X', CAST(inHeader.nsDEA:BusinessUnit AS CHARACTER), FALSE);
	--validate range
	IF checkValue(inBody.nsDEA:MonthsBankStatements) THEN
		--this section will check the statmentrange value--
		--correct format
		DECLARE startDate DATE;
		DECLARE endDate DATE;
		SET startDate=SUBSTRING(inBody.nsDEA:StatementRange BEFORE ':');
		SET endDate=SUBSTRING(inBody.nsDEA:StatementRange AFTER ':');
		--invalid range
		IF endDate < startDate THEN
			THROW USER EXCEPTION MESSAGE 2951 VALUES('102', 'StatementRange invalid, end date < start Date: '||CAST(inBody.nsDEA:StatementRange AS CHARACTER));
		END IF;
		--not exceed 6 months
		DECLARE sixMonthsDate DATE;
		SET sixMonthsDate = (CURRENT_DATE - INTERVAL '180' DAY);
		IF (sixMonthsDate>endDate) AND (sixMonthsDate>startDate) Then
			SET errorC='102';
			SET errorMsg='StatementRange invalid, exceeds 6 months:'||CAST(inBody.nsDEA:StatementRange AS CHARACTER);
			THROW USER EXCEPTION MESSAGE 2951 VALUES('102', 'StatementRange invalid, exceeds 6 months:'||CAST(inBody.nsDEA:StatementRange AS CHARACTER));
		END IF;
	END IF;
END;

CREATE FUNCTION checkValue (IN check REFERENCE) RETURNS BOOLEAN
BEGIN
	DECLARE result BOOLEAN FALSE;

	IF ((check IS NOT NULL) AND (check <> '')) THEN
		SET result=FALSE;
	else
		SET result=TRUE;
	END IF;
	RETURN result;
END;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buildContentMgmnt
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE header REFERENCE TO InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:responseHeader;
		DECLARE informalResp REFERENCE TO InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.NsStatements:getInformalStatementResponse;

		CREATE FIELD Environment.messages.errorCode;
		DECLARE errorC REFERENCE TO Environment.messages.errorCode;
		CREATE FIELD Environment.messages.errorMsg;
		DECLARE errorMsg REFERENCE TO Environment.messages.errorMsg;
		--validate statement respones
		CALL validateStatement(header,informalResp,Environment.AccountDetails.AccountNumber,errorC,errorMsg,Environment);
		--save values
		SET Environment.AccountDetails.customerNo=informalResp.customerInformation.uniqueCustomerNumber;
		DECLARE i INTEGER 1;
		DECLARE j INTEGER CAST(Environment.statement.totalTranCount AS INTEGER);
		DECLARE t INTEGER 0;
		SET t=CAST(Environment.statement.totalTranCount AS INTEGER)+1;
		DECLARE openBal DECIMAL 0;
		DECLARE closeBal DECIMAL 0;
		DECLARE amount DECIMAL 0;
		--build content message
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.ns:createRequest.request;

		DECLARE outBody REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.ns:createRequest.request;

		SET outBody.entryDate=CURRENT_TIMESTAMP;
		SET outBody.instructions.adapterId='FOP';
		SET outBody.instructions.instructionID='0';
		SET outBody.instructions.instructionType='generate';
		IF (CAST(Environment.statement.pageCount AS INTEGER)>=CAST(Environment.statement.maxPages AS INTEGER)) THEN
			SET outBody.instructions.requestData.template.templateDefId=TEMPLATEE; --'00158033';
		ELSE
			SET outBody.instructions.requestData.template.templateDefId=TEMPLATEN; --'00157254';
		END IF;
		CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA NAME 'HEADER';
		CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'ACCOUNT_NUMBER';
		CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE informalResp.accountIdentification.accountNumber;
		CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'ACCOUNT_NAME';
		CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE informalResp.customerInformation.customerName.title||' '||informalResp.customerInformation.customerName.initials||' '||informalResp.customerInformation.customerName.surname;
		CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'PRODUCT';
		IF (CAST(Environment.statement.pageCount AS INTEGER)>1) THEN
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE informalResp.accountInformation.productName;
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'DATE_FROM';
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE Environment.statement.transactions.transaction[j].date;
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'DATE_TO';
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE Environment.statement.transactions.transaction[i].date;
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'BALANCE_OPEN';
			IF (Environment.AccountDetails.accSysNo='110') THEN
				IF Environment.statement.transactions.transaction[j].debitCreditIndicator = 'C'
					THEN
					SET openBal = CAST(Environment.statement.transactions.transaction[j].balanceAfter AS DECIMAL(20,2)) - (ABS(CAST(Environment.statement.transactions.transaction[j].amount AS DECIMAL(20,2))));
				ELSE SET openBal = CAST(Environment.statement.transactions.transaction[j].balanceAfter AS DECIMAL(20,2)) + (ABS(CAST(Environment.statement.transactions.transaction[j].amount AS DECIMAL(20,2))));
				END IF;
			ELSE
				SET openBal = CAST(Environment.statement.openingBalance AS DECIMAL(20,2));
			END IF;
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE openBal;
			SET closeBal = openBal;
		ELSE

			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE informalResp.accountInformation.productName;
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'DATE_FROM';
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE informalResp.transactions[j].postingDate;
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'DATE_TO';
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE informalResp.transactions[i].postingDate;
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'BALANCE_OPEN';
			IF (Environment.AccountDetails.accSysNo='110') THEN
				IF informalResp.transactions[j].debitCreditIndicator = 'C'
					THEN
					SET openBal = CAST(informalResp.transactions[j].balanceAfter AS DECIMAL) - (ABS(CAST(informalResp.transactions[j].amount AS DECIMAL)));
				ELSE SET openBal = CAST(informalResp.transactions[j].balanceAfter AS DECIMAL) + (ABS(CAST(informalResp.transactions[j].amount AS DECIMAL)));
				END IF;
			ELSE
				SET openBal = CAST(informalResp.transactionHeader.openingBalance.amount AS DECIMAL(20,2));
			END IF;
			CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE openBal;
			SET closeBal = openBal;

		END IF;


		IF (CAST(Environment.statement.pageCount AS INTEGER)>1) THEN

			WHILE i<t DO
				SET amount = (ABS(CAST(Environment.statement.transactions.transaction[j].amount AS DECIMAL(20,2))));
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA NAME 'PROPERTIES';
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'KEY' VALUE 'DATE';
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE Environment.statement.transactions.transaction[j].date;
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'KEY' VALUE 'DESCRIPTION';
				IF Environment.statement.transactions.transaction[j].narrative <> '' OR Environment.statement.transactions.transaction[j].narrative <> NULL
					THEN
					CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE Environment.statement.transactions.transaction[j].description || ' ' || Environment.statement.transactions.transaction[j].narrative;
				ELSE
					CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE Environment.statement.transactions.transaction[j].description;
				END IF;

				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'KEY' VALUE 'AMOUNT';
				IF Environment.statement.transactions.transaction[j].debitCreditIndicator = 'D'
					THEN
					CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE ( '-' ||CAST(amount AS CHARACTER));
				ELSE
					CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE CAST(Environment.statement.transactions.transaction[j].amount AS DECIMAL(20,2));
				END IF;
				--need to add sign value
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'KEY' VALUE 'BALANCE';
				IF Environment.statement.transactions.transaction[j].debitCreditIndicator = 'C'
					THEN
					SET closeBal = closeBal + (ABS(CAST(Environment.statement.transactions.transaction[j].amount AS DECIMAL(20,2))));
				ELSE SET closeBal = closeBal - (ABS(CAST(Environment.statement.transactions.transaction[j].amount AS DECIMAL(20,2))));
				END IF;
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE closeBal;
				SET i=i+1;
				SET j=j-1;
			END WHILE;
		ELSE
			WHILE i<t DO
				SET amount = (ABS(CAST(informalResp.transactions[j].amount AS DECIMAL(20,2))));
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA NAME 'PROPERTIES';
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'KEY' VALUE 'DATE';
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE informalResp.transactions[j].postingDate;
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'KEY' VALUE 'DESCRIPTION';
				IF informalResp.transactions[j].narrative <> '' OR informalResp.transactions[j].narrative <> NULL
					THEN
					CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE informalResp.transactions[j].description || ' ' || informalResp.transactions[j].narrative;
				ELSE
					CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE informalResp.transactions[j].description;
				END IF;
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'KEY' VALUE 'AMOUNT';
				IF informalResp.transactions[j].debitCreditIndicator = 'D'
					THEN
					CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE ( '-' ||CAST(amount AS CHARACTER));
				ELSE
					CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE CAST(informalResp.transactions[j].amount AS DECIMAL(20,2)); --need to add sign value
				END IF;
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'KEY' VALUE 'BALANCE';
				IF informalResp.transactions[j].debitCreditIndicator = 'C'
					THEN
					SET closeBal = closeBal + (ABS(CAST(informalResp.transactions[j].amount AS DECIMAL(20,2))));
				ELSE SET closeBal = closeBal - (ABS(CAST(informalResp.transactions[j].amount AS DECIMAL(20,2))));
				END IF;
				CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.PROPERTIES[i] NAME 'VALUE' VALUE closeBal;
				SET i=i+1;
				set j=j-1;
			END WHILE;
		END IF;

		CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'KEY' VALUE 'BALANCE_CLOSE';
		CREATE LASTCHILD OF outBody.instructions.requestData.xmlTest.DATA.HEADER NAME 'VALUE' VALUE closeBal;

		DECLARE wholeMsgBlob BLOB ASBITSTREAM(outBody.instructions.requestData.xmlTest);
		DECLARE wholeMsgChar CHAR CAST(wholeMsgBlob AS CHAR CCSID InputRoot.Properties.CodedCharSetId);
		SET outBody.instructions.requestData.(XMLNSC.CDataField)xmlData = wholeMsgChar;
		DELETE FIELD outBody.instructions.requestData.xmlTest;

		SET outBody.instructions.status='0';
		--V + F User story: same ID to support tracing. Previous value was new generated UUIDASCHAR		
		SET outBody.requestID=Environment.Trace.TraceID;
		SET outBody.status='0';
		SET outBody.synchronous='true';
	END;
END MODULE;

create PROCEDURE validateStatement (IN header REFERENCE, IN informalResp REFERENCE,IN accNo CHARACTER,INOUT errorC REFERENCE,INOUT errorMsg REFERENCE, IN env REFERENCE)
BEGIN
	DECLARE envHeader REFERENCE TO env.messages.DEA.nsSoap:Header.nsDEA:IDXHeader;
	--check error response
	IF (UPPER(SUBSTRING(header.message.messageText FROM 1 FOR 15))='NO PAYMENT ITEM') THEN
		SET errorC='9';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('9', 'No transactions for requested range. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	IF (UPPER(header.message.messageType)<>'S') THEN
		SET errorC='101';
		SET errorMsg='Statement generation error';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('111', 'Statement Error: '||header.message.messageText|| '. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	--validate response values
	IF (CAST(accNo AS INTEGER) <>CAST(informalResp.accountIdentification.accountNumber AS INTEGER)) THEN
		SET errorC='2';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('2', 'Account validation failure. DEA Account:'||accNo||' SBSA Account:'||informalResp.accountIdentification.accountNumber|| '. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	--validate number of transactions
	IF (CAST(informalResp.transactionHeader.transactionCount AS INTEGER)=0) THEN
		SET errorC='9';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('9', 'No transactions for requested range. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
END;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buildDEAErrorResp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--build DEA response
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.ns8:IDXHeader;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.ns8:fault;

		DECLARE outHeader REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.ns8:IDXHeader;
		DECLARE outBody REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.ns8:fault;
		DECLARE envHeader REFERENCE TO Environment.messages.DEA.nsSoap:Header.nsDEA:IDXHeader;

		SET outHeader.ns8:AccountStatus=envHeader.nsDEA:AccountStatus;
		SET outHeader.ns8:AccountType=envHeader.nsDEA:AccountType;
		SET outHeader.ns8:IBReference=envHeader.nsDEA:IBReference;
		SET outHeader.ns8:IDXReference=envHeader.nsDEA:IDXReference;
		SET outHeader.ns8:InitiatingBank=Environment.nsDEA:InitiatingBank;
		SET outHeader.ns8:MessageType=envHeader.nsDEA:MessageType;
		SET outHeader.ns8:SourceBank=envHeader.nsDEA:SourceBank;
		SET outHeader.ns8:SBReference=envHeader.nsDEA:SBReference;
		SET outHeader.ns8:BusinessUnit=envHeader.nsDEA:BusinessUnit;
		SET outHeader.ns8:InitiatingIP=envHeader.nsDEA:InitiatingIP;

		SET outBody.ns8:ErrorCode=Environment.messages.errorCode;

		IF (outBody.ns8:ErrorCode IS NOT NULL) THEN
			SET outBody.ns8:ErrorCode=Environment.messages.errorCode;
			SET outBody.ns8:ErrorDescription='Fault occured in initiating bank. '||Environment.messages.errorMsg;
		ELSE
			SET outBody.ns8:ErrorCode='99';
			SET outBody.ns8:ErrorDescription='Fault occured in initiating bank';
		END IF;


		RETURN TRUE;
	END;

END MODULE;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buildDEAResp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--validate ecm response
		DECLARE errorC REFERENCE TO Environment.messages.errorCode;
		DECLARE errorMsg REFERENCE TO Environment.messages.errorMsg;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.ns9:IDXHeader;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.ns9:Submit;

		DECLARE outHeader REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header;
		DECLARE outBody REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.ns9:Submit;
		DECLARE envHeader REFERENCE TO Environment.messages.DEA.nsSoap:Header.nsDEA:IDXHeader;

		IF (errorC IS NOT NULL) AND (errorC<>'0') THEN
			IF (CAST(errorC AS INTEGER)>100) THEN
				PROPAGATE TO TERMINAL 'out2';
				RETURN FALSE;
			ELSE
				SET outHeader.ns9:IDXHeader.ns9:AccountStatus=errorC;
				SET outHeader.ns9:IDXHeader.ns9:AccountType=envHeader.nsDEA:AccountType;
				SET outHeader.ns9:IDXHeader.ns9:IDXReference=envHeader.nsDEA:IDXReference;
				SET outHeader.ns9:IDXHeader.ns9:InitiatingBank=envHeader.nsDEA:InitiatingBank;
				SET outHeader.ns9:IDXHeader.ns9:MessageType=envHeader.nsDEA:MessageType;
				SET outHeader.ns9:IDXHeader.ns9:SourceBank=envHeader.nsDEA:SourceBank;
				SET outHeader.ns9:IDXHeader.ns9:SBReference=envHeader.nsDEA:SBReference;
				SET outHeader.ns9:IDXHeader.ns9:BusinessUnit=BUS_UNIT;
				SET outHeader.ns9:IDXHeader.ns9:InitiatingIP=envHeader.nsDEA:InitiatingIP;
				CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.ns9:Submit.ns9:response.ns9:Image;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF;

		ELSE

			CALL validateECM(InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body, errorC,errorMsg);
			--build DEA response
			--mapping from incoming value
			SET outHeader.ns9:IDXHeader.ns9:AccountStatus='0';
			SET outHeader.ns9:IDXHeader.ns9:AccountType=envHeader.nsDEA:AccountType;
			SET outHeader.ns9:IDXHeader.ns9:IDXReference=envHeader.nsDEA:IDXReference;
			SET outHeader.ns9:IDXHeader.ns9:InitiatingBank=envHeader.nsDEA:InitiatingBank;
			SET outHeader.ns9:IDXHeader.ns9:MessageType=envHeader.nsDEA:MessageType;
			SET outHeader.ns9:IDXHeader.ns9:SourceBank=envHeader.nsDEA:SourceBank;
			SET outHeader.ns9:IDXHeader.ns9:SBReference=envHeader.nsDEA:SBReference;
			SET outHeader.ns9:IDXHeader.ns9:BusinessUnit=BUS_UNIT;
			SET outHeader.ns9:IDXHeader.ns9:InitiatingIP=envHeader.nsDEA:InitiatingIP;

			SET outBody.ns9:response.ns9:Image.ns9:StatementImage.ns9:Encoding='PDF';
			SET outBody.ns9:response.ns9:Image.ns9:StatementImage.ns9:Image=InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.ns:createRequestResponse.return.responseData.documents.pageBos.file;
			SET outBody.ns9:response.ns9:Image.ns9:StatementImage.ns9:Pages='1';
			SET outBody.ns9:response.ns9:Image.ns9:StatementImage.ns9:Size='111';

			RETURN TRUE;
		END IF;
	END;

END MODULE;

CREATE PROCEDURE validateECM (IN input REFERENCE, INOUT errorC REFERENCE,INOUT errorMsg REFERENCE)
BEGIN
	IF input.ns:createRequestResponse.return.responseData.documents.pageBos.file IS NULL OR input.ns:createRequestResponse.return.responseData.documents.pageBos.file = '' THEN
		SET errorC='101';
		SET errorMsg='Statement generation error';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('1', 'Generating of PDF failed');
	END IF;
	IF EXISTS(input.nsSoap:Envelope.nsSoap:Body.nsSoap:Fault[]) THEN
		SET errorC='101';
		SET errorMsg='Statement generation error';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('1', 'Generating of PDF failed');
	END IF;
END;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buildGetCust
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:requestHeader;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsCust:getCustomer;

		DECLARE inDEABody REFERENCE TO Environment.messages.DEAReq.nsSoap:Envelope.nsSoap:Body.nsDEA:Submit.nsDEA:request;
		DECLARE outCustHeader REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:requestHeader;
		DECLARE outCustBody REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsCust:getCustomer;
		-- create header structure
		SET outCustHeader.timestamp = CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'IU');
		SET outCustHeader.traceMessageId = UUIDASCHAR;
		--V + F User story: same ID to support tracing. New generated UUID
		SET outCustHeader.enterpriseTraceUUId = Environment.Trace.TraceID;
		SET outCustHeader.contentType = 'Content Type';
		SET outCustHeader.sender.senderId = 'DEA_USR';
		SET outCustHeader.sender.sourceSystem = 'ESB';
		SET outCustHeader.sender.sourceApplication='020';
		SET outCustHeader.sender.applicationSessionId = 'App_1';
		SET outCustHeader.sender.originatorProcessingMode='A';
		SET outCustHeader.interfaceName = 'BP_GETCUSTOMER';
		SET outCustHeader.version = '0001';
		--build body
		SET outCustBody.responseProcessing.filter = 'Full';
		SET outCustBody.request.partnerId = Environment.AccountDetails.customerNo;
		
		SET OutputLocalEnvironment = InputLocalEnvironment;

	END;
END MODULE;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buildMsg
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE inRefHeader REFERENCE TO InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:responseHeader;
		DECLARE inRefBody REFERENCE TO InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsCust:getCustomerResponse;

		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:requestHeader;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsMsg:sendMessageRequest.message;

		DECLARE outMsgHeader REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:requestHeader;
		DECLARE outMsgBody REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsMsg:sendMessageRequest.message;

		DECLARE envHeader REFERENCE TO Environment.messages.DEA.nsSoap:Header.nsDEA:IDXHeader;

		CALL validateCustomer (InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:responseHeader);
		DECLARE com BOOLEAN FALSE;
		FOR source AS InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsCust:getCustomerResponse.contactInfo.communicationData.basicPhoneDetails[] DO
			IF source.default <> '' AND source.default = '1' THEN
				IF source.supportsSMS = 'Y' THEN
					SET Environment.variables.comUsage = source;
					SET Environment.messageProtocol = 'SMS';
					SET com = TRUE;
				END IF;
			END IF;
		END FOR;

		IF com = FALSE THEN
			FOR source AS InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsCust:getCustomerResponse.contactInfo.communicationData.emailDetails[] DO
				IF source.default <> '' AND source.default = '1' THEN
					SET Environment.variables.comUsage = source;
					SET Environment.messageProtocol = 'Email';
					SET com = TRUE;
				END IF;
			END FOR;
		END IF;

		IF com = FALSE THEN
			THROW USER EXCEPTION MESSAGE 2951 VALUES('911', 'Get customer Error: no Preferred coms details');
		END IF;
		IF Environment.variables.comUsage.number IS NULL AND Environment.variables.comUsage.address IS NULL THEN
			THROW USER EXCEPTION MESSAGE 2951 VALUES('911', 'Get customer Error: no email address or number');
		END IF;
		-- create header structure
		SET outMsgHeader.timestamp = CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'IU');
		SET outMsgHeader.traceMessageId = UUIDASCHAR;
		--V + F User story: same ID to support tracing. New generated UUID
		SET outMsgHeader.enterpriseTraceUUId = Environment.Trace.TraceID;
		SET outMsgHeader.contentType = 'TEXT/XML';
		SET outMsgHeader.sender.senderId = 'DEA_USR';
		SET outMsgHeader.sender.sourceSystem = '281';
		SET outMsgHeader.sender.sourceApplication = '281';
		SET outMsgHeader.sender.applicationSessionId = CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'IU');
		SET outMsgHeader.interfaceName = 'MSMS';
		SET outMsgHeader.version = '2_0';
		--Build body
		SET outMsgBody.route = 'InternalTemplate';
		-- IF Environment.messageProtocol = 'SMS' THEN
		SET outMsgBody.messageProtocol = 'SMS';
		-- ELSE SET outMsgBody.messageProtocol = 'Email';
		-- END IF;


		SET outMsgBody.securityType = 'None';
		SET outMsgBody.priority = 3;
		SET outMsgBody.sourceCountry = 'ZA';
		SET outMsgBody.sourceFunction = 'DEADOCEXAS';
		SET outMsgBody.senderParty.senderAddress = '083STANDARD'; --TBC
		SET outMsgBody.template.templateSystem = 'Predefined';
		SET outMsgBody.template.templateName = 'DEA_REF';
		SET outMsgBody.template.templateVersion = '0';
		SET outMsgBody.template.templateLanguage = 'EN';

		SET outMsgBody.messageContent.body.data.item[1].(XMLNSC.Attribute)name = 'Bankname';
		SET outMsgBody.messageContent.body.data.item[1].(XMLNSC.Attribute)value = Environment.messages.bankName;
		SET outMsgBody.messageContent.body.data.item[2].(XMLNSC.Attribute)name = 'IDXREF';
		SET outMsgBody.messageContent.body.data.item[2].(XMLNSC.Attribute)value = envHeader.nsDEA:IDXReference;

		SET outMsgBody.messageContent.destinationParty.address.(XMLNSC.Attribute)type = 'to';
		SET outMsgBody.messageContent.destinationParty.address.(XMLNSC.Attribute)partyId = Environment.AccountDetails.customerNo;
		SET outMsgBody.messageContent.destinationParty.address.(XMLNSC.Attribute)uniqueId = UUIDASCHAR; -- Needs to change
		-- IF outMsgBody.messageProtocol = 'SMS' THEN
		SET outMsgBody.messageContent.destinationParty.address.(XMLNSC.Attribute)value = Environment.variables.comUsage.number;
		-- ELSE
		-- SET outMsgBody.messageContent.destinationParty.address.(XMLNSC.Attribute)value = Environment.variables.comUsage.address;
		-- END IF;
		
		SET OutputLocalEnvironment = InputLocalEnvironment;

	END;
END MODULE;

create PROCEDURE validateCustomer (IN header REFERENCE)
BEGIN
	--check error response
	IF (UPPER(header.message.messageType)<>'S') THEN
		THROW USER EXCEPTION MESSAGE 2951 VALUES('911', 'Get customer Error: '||header.message.messageText);
	END IF;
END;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buildStatements
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CREATE FIELD Environment.messages.errorCode;
		DECLARE errorC REFERENCE TO Environment.messages.errorCode;
		DECLARE accLocResp REFERENCE TO InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.accLoc:GetAccountLocationResponse.accLoc:AcctLocatorRec;
		--paging
		IF (Environment.statement.maxPages IS NULL) THEN
			DECLARE env REFERENCE TO Environment;
			DECLARE accLocResp REFERENCE TO InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.accLoc:GetAccountLocationResponse.accLoc:AcctLocatorRec;
			CALL pageOne(env,accLocResp);
		END IF;

		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:requestHeader;
		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.NsStatements:getInformalStatementRequest.statement;

		DECLARE inDEABody REFERENCE TO Environment.messages.DEA;
		DECLARE outStatementHeader REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Header.nsTech:requestHeader;
		DECLARE outStatementBody REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.NsStatements:getInformalStatementRequest.statement;
		-- create header structure
		SET outStatementHeader.timestamp = CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'IU');
		SET outStatementHeader.traceMessageId = UUIDASCHAR;
		--V + F User story: same ID to support tracing. Previous value was new generated UUIDASCHAR
		SET outStatementHeader.enterpriseTraceUUId = Environment.Trace.TraceID;
		SET outStatementHeader.contentType = 'Content Type';
		SET outStatementHeader.sender.senderId = 'DEA_USR';
		SET outStatementHeader.sender.sourceSystem = 'ESB';
		SET outStatementHeader.sender.applicationSessionId = 'App_1';
		SET outStatementHeader.interfaceName = 'ESCInterface';
		SET outStatementHeader.version = '0002';
		--build body
		SET outStatementBody.processingRequest.returnAccountDetailsIndicator = 'Yes';
		SET outStatementBody.processingRequest.retainAndReturnSortCriteria = 'No';
		SET outStatementBody.processingRequest.retainAndReturnSearchCriteria = 'No';
		SET outStatementBody.accountIdentification.accountNumber =Environment.AccountDetails.AccountNumber ;
		SET outStatementBody.accountIdentification.accountSystemId=Environment.AccountDetails.accSysNo;
		IF (Environment.AccountDetails.accSysNo='1') THEN
			SET outStatementBody.accountIdentification.serialNumber='000';
		END IF;
		SET outStatementBody.accountIdentification.countryCode='ZA';
		--validate range
		IF checkValue(inDEABody.nsSoap:Body.nsDEA:Submit.nsDEA:request.nsDEA:StatementRange) THEN
			--this section will check the statmentrange value--
			--correct format
			DECLARE startDate DATE;
			DECLARE endDate DATE;
			SET startDate = SUBSTRING(inDEABody.nsSoap:Body.nsDEA:Submit.nsDEA:request.nsDEA:StatementRange BEFORE ':');
			SET endDate = SUBSTRING(inDEABody.nsSoap:Body.nsDEA:Submit.nsDEA:request.nsDEA:StatementRange AFTER ':');
			--not future dated
			IF (endDate>CURRENT_DATE) THEN
				SET endDate = CURRENT_DATE;
			END IF;
			--not exceed 6 months
			DECLARE noDays INTEGER;
			SET noDays=(CURRENT_DATE-startDate) DAY;
			IF noDays>180 Then
				SET startDate = (CURRENT_DATE - INTERVAL '180' DAY);
				SET outStatementBody.searchCriteria.statementType= 'dateRangeStatement';
				SET outStatementBody.searchCriteria.searchRange.startDate= CAST(startDate AS CHARACTER);
				SET outStatementBody.searchCriteria.searchRange.endDate= CAST(endDate AS CHARACTER);
			ELSE
				SET outStatementBody.searchCriteria.statementType= 'dateRangeStatement';
				SET outStatementBody.searchCriteria.searchRange.startDate= CAST(startDate AS CHARACTER);
				SET outStatementBody.searchCriteria.searchRange.endDate= CAST(endDate AS CHARACTER);
			END IF;

		ELSE
			--checking number of months
			IF (CAST(inDEABody.nsSoap:Body.nsDEA:Submit.nsDEA:request.nsDEA:MonthsBankStatements AS INTEGER)<7) THEN
				SET outStatementBody.searchCriteria.statementType= 'noOfDaysStatement';
				DECLARE mon INTEGER inDEABody.nsSoap:Body.nsDEA:Submit.nsDEA:request.nsDEA:MonthsBankStatements;
				SET outStatementBody.searchCriteria.searchRange.days = CAST(CAST(6 AS INTEGER)*30 AS CHARACTER);
			ELSE
				SET outStatementBody.searchCriteria.statementType= 'noOfDaysStatement';
				DECLARE mon INTEGER inDEABody.nsSoap:Body.nsDEA:Submit.nsDEA:request.nsDEA:MonthsBankStatements;
				SET outStatementBody.searchCriteria.searchRange.days = CAST(CAST(inDEABody.nsSoap:Body.nsDEA:Submit.nsDEA:request.nsDEA:MonthsBankStatements AS INTEGER)*30 AS CHARACTER);
			END IF;
		END IF;

		SET outStatementBody.sort.sortType = 'Date';
		SET outStatementBody.sort.sortCriteria = 'Reverse';
		-- check paging;
		IF (Environment.statement.pageCount='1') THEN
			SET outStatementBody.paging.pagingRequired= 'Yes';
			SET outStatementBody.paging.pageNo= 1;
		ELSE
			SET Environment.statement.paging.pageNo=CAST(Environment.statement.paging.pageNo AS INTEGER);
			SET outStatementBody.paging.pagingRequired= 'Yes';
			SET outStatementBody.paging.pageNo=Environment.statement.paging.pageNo;
			SET outStatementBody.paging.containerName=Environment.statement.paging.containerName;
			SET outStatementBody.paging.BAPage=Environment.statement.paging.BAPage;
			SET outStatementBody.paging.SAPPage=Environment.statement.paging.SAPPage;
		END IF;

		SET outStatementBody.routingID= '051001';

	END;
END MODULE;

CREATE PROCEDURE pageOne (INOUT env REFERENCE, IN accLocResp REFERENCE )
BEGIN
	DECLARE inDEABody REFERENCE TO env.messages.DEA.nsSoap:Body.nsDEA:Submit.nsDEA:request.nsDEA:PhysicalEntity.nsDEA:Entity;
	SET env.statement.maxPages=MAXPAGENO;
	SET env.statement.pageCount='1';
	SET env.statement.totalTranCount='0';
	SET env.AccountDetails.accSysNo=accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctKeys.accLoc:AcctSrcSystemId;
	SET env.AccountDetails.AccountNumber = accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctKeys.accLoc:AcctIdent.IFXBase:AcctIdentValue;

	SET env.AccountDetails.serial=accLocResp.accLoc:AcctLocatorInfo.IFXBase:OriginatingBranch;

	CALL validateAccountLocator(accLocResp,env.messages.errorCode,inDEABody,env);
END;

create PROCEDURE validateAccountLocator (IN accLocResp REFERENCE, INOUT errorC REFERENCE, IN inDEABody REFERENCE, IN env REFERENCE )
BEGIN
	DECLARE envHeader REFERENCE TO env.messages.DEA.nsSoap:Header.nsDEA:IDXHeader;
	--check error messages
	IF (accLocResp.accLoc:AcctLocatorStatus. accLoc:AcctLocatorStatusCode<>'00') THEN
		SET errorC='2';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('2', 'Account Locator Error: '||accLocResp.accLoc:AcctLocatorStatus.IFXBase:StatusDesc || '. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	--check multiple accounts and serial
	-- IF (DEABody.nsDEA:IdentificationType <> accLocResp.accLoc:AcctLocatorInfo.accLoc:IssuedIdent.IFXBase:IssuedIdentType)THEN
	-- SET errorC='4';
	-- THROW USER EXCEPTION MESSAGE 2951 VALUES('4', 'Incorrect ID type');
	-- END IF;
	IF (inDEABody.nsDEA:IdentificationNo <> accLocResp.accLoc:AcctLocatorInfo.accLoc:IssuedIdent.IFXBase:IssuedIdentValue) THEN
		SET errorC='4';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('4', 'Incorrect ID Number. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	--check account closed
	IF (accLocResp.accLoc:AcctLocatorInfo.IFXBase:ClosedDt<>'9999-12-31') THEN
		SET errorC='7';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('7', 'Account closed. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	--check dormant
	IF (UPPER(accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctStatusInd.accLoc:Dormancy)<>'T') THEN
		IF (UPPER(accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctStatusInd.accLoc:Dormancy)<>'FALSE') THEN
			SET errorC='8';
			THROW USER EXCEPTION MESSAGE 2951 VALUES('8', 'Account Status: Dormant. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
		END IF;
	END IF;
	--check account status
	IF (UPPER(accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctStatusInd.accLoc:StopDebt)<>'FALSE') THEN
		SET errorC='6';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('6', 'Account Status: StopDebt. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	ELSEIF (UPPER(accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctStatusInd.accLoc:StopAllValue)<>'FALSE') THEN
		SET errorC='6';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('6', 'Account Status: StopAllValue. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	ELSEIF (UPPER(accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctStatusInd.accLoc:ReferEnquiries)<>'FALSE') THEN
		SET errorC='6';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('6', 'Account Status: ReferEnquiries. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	ELSEIF (UPPER(accLocResp.accLoc:AcctLoctorInfo.accLoc:AcctStatusInd.accLoc:LockAccount)<>'FALSE') THEN
		SET errorC='6';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('6', 'Account Status: LockAccount. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	ELSEIF (UPPER(accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctStatusInd.accLoc:FraudLock)<>'FALSE') THEN
		SET errorC='6';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('6', 'Account Status: FruadLock. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	ELSEIF (UPPER(accLocResp.accLoc:AcctLocatorInfo.accLoc:AcctStatusInd.accLoc:StopAllValue)<>'FALSE') THEN
		SET errorC='6';
		THROW USER EXCEPTION MESSAGE 2951 VALUES('6', 'Account Status: SopAllValue. IDX REFERENCE NO:' || envHeader.nsDEA:IDXReference);
	END IF;
	--check account status
END;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_checkMsgResp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF EXISTS(InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsSoap:Fault[]) THEN
			THROW USER EXCEPTION MESSAGE 2951 VALUES('911', 'Central Messaging Error: ');
		END IF;
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputRoot.XMLNSC.Vicky.Test = 'TestReply';
	END;
END MODULE;

CREATE FILTER MODULE MF_DEAStatementsV1_0_Provide_PagingFilter
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE informalResp REFERENCE TO Root.XMLNSC.nsSoap:Envelope.nsSoap:Body.NsStatements:getInformalStatementResponse;
		IF (Environment.statement.pageCount='1') THEN
			SET Environment.statement.openingBalance = informalResp.transactionHeader.openingBalance.amount;
		END IF;
		IF ((UPPER(Root.XMLNSC.nsSoap:Envelope.nsSoap:Body.NsStatements:getInformalStatementResponse.paging.morePagesIndicator)='YES') AND (CAST(Environment.statement.pageCount AS INTEGER)<CAST(Environment.statement.maxPages AS INTEGER))) THEN
			DECLARE i INTEGER 1;
			IF (Environment.statement.pageCount<>'1') THEN
				SET i=CAST(Environment.statement.totalTranCount AS INTEGER)+1;
			END IF;
			--save transactions
			--DECLARE informalResp REFERENCE TO Root.XMLNSC.nsSoap:Envelope.nsSoap:Body.NsStatements:getInformalStatementResponse;
			FOR tran AS informalResp.transactions[] DO
				SET Environment.statement.transactions.transaction[i].date=tran.postingDate;
				SET Environment.statement.transactions.transaction[i].description=tran.description;
				SET Environment.statement.transactions.transaction[i].narrative=tran.narrative;
				SET Environment.statement.transactions.transaction[i].amount=tran.amount;
				SET Environment.statement.transactions.transaction[i].balanceAfter=tran.balanceAfter;
				SET Environment.statement.transactions.transaction[i].debitCreditIndicator = tran.debitCreditIndicator;
				SET i=i+1;
			END FOR;

			SET Environment.statement.pageCount=CAST(Environment.statement.pageCount AS INTEGER)+1;
			SET Environment.statement.paging=informalResp.paging;
			SET Environment.statement.totalTranCount=CAST(Environment.statement.totalTranCount AS INTEGER)+ CAST(informalResp.transactionHeader.transactionCount AS INTEGER);
			IF (Environment.statement.totalTranCount > 2499)
				THEN
				SET Environment.messages.errorCode = '105';
				THROW USER EXCEPTION MESSAGE 2951 VALUES('105', 'IDX - statement contains more than 2500 Transactions');
			END IF;

			RETURN TRUE;
		ELSEIF (CAST(Environment.statement.pageCount AS INTEGER)>1) THEN
			DECLARE i INTEGER CAST(Environment.statement.totalTranCount AS INTEGER)+1;
			--DECLARE informalResp REFERENCE TO Root.XMLNSC.nsSoap:Envelope.nsSoap:Body.NsStatements:getInformalStatementResponse;
			FOR tran AS informalResp.transactions[] DO
				SET Environment.statement.transactions.transaction[i].date=tran.postingDate;
				SET Environment.statement.transactions.transaction[i].description=tran.description;
				SET Environment.statement.transactions.transaction[i].narrative=tran.narrative;
				SET Environment.statement.transactions.transaction[i].amount=tran.amount;
				SET Environment.statement.transactions.transaction[i].balanceAfter=tran.balanceAfter;
				SET Environment.statement.transactions.transaction[i].debitCreditIndicator = tran.debitCreditIndicator;
				SET i=i+1;
			END FOR;
			SET Environment.statement.totalTranCount=CAST(Environment.statement.totalTranCount AS INTEGER)+ CAST(informalResp.transactionHeader.transactionCount AS INTEGER);
			IF (Environment.statement.totalTranCount > 2499)
				THEN
				SET Environment.messages.errorCode = '105';
				THROW USER EXCEPTION MESSAGE 2951 VALUES('105', 'IDX - statement contains more than 2500 Transactions');
			END IF;
			RETURN FALSE;
		ELSE
			SET Environment.statement.totalTranCount=informalResp.transactionHeader.transactionCount;
			IF (Environment.statement.totalTranCount > 2499)
				THEN
				SET Environment.messages.errorCode = '105';
				THROW USER EXCEPTION MESSAGE 2951 VALUES('105', 'IDX - statement contains more than 2500 Transactions');
			END IF;
			RETURN FALSE;
		END IF;


	END;

END MODULE;

CREATE COMPUTE MODULE MF_DEAStatementsV1_0_Provide_buildMaintCust
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CREATE FIELD OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsGlob:CustomerCRMChangeRequest_sync;
		DECLARE outCustCRM REFERENCE TO OutputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsGlob:CustomerCRMChangeRequest_sync;

		CREATE LASTCHILD OF outCustCRM AS outCustCRM NAME 'MessageHeader';
		SET outCustCRM.UUID = UUIDASCHAR;
		--V + F User story: same ID to support tracing. Previous value was using the same UUID from above
		SET outCustCRM.ReferenceUUID = Environment.Trace.TraceID;
		SET outCustCRM.nsUrn:CreationDateTime = CAST(CURRENT_DATE AS CHARACTER FORMAT 'YYYY-MM-dd''T''HH:mm:ss''Z');
		SET outCustCRM.nsUrn:SenderBusinessSystemID = 155;
		SET outCustCRM.nsUrn:SenderParty.InternalID.(SOAP.Attribute)schemeID = '155';
		SET outCustCRM.nsUrn:SenderParty.InternalID = 'DEA_USR';
		SET outCustCRM.nsUrn:BusinessScope.TypeCode = 'SRCL';
		SET outCustCRM.nsUrn:BusinessScope.InstanceID = '003';

		MOVE outCustCRM PARENT;
		CREATE LASTCHILD OF outCustCRM AS outCustCRM NAME 'BusinessPartner';
		SET outCustCRM.InternalID = Environment.AccountDetails.customerNo;
		SET outCustCRM.NumberRangeIntervalBusinessPartnerGroupCode = 'SBIN';
		SET outCustCRM.nsUrn1:Partner.PartnerFinservInformation.GeneralFinservInformation.GeneralFinservData.CentralData.VIPIndicator.(SOAP.Attribute)updateIndicator = 'true';
		SET outCustCRM.nsUrn1:Partner.PartnerFinservInformation.GeneralFinservInformation.GeneralFinservData.CentralData.VIPIndicator = 'false';
		SET outCustCRM.nsUrn1:Partner.PartnerFinservInformation.GeneralFinservInformation.GeneralFinservData.CentralData.UndesirableCustomerIndicator = 'true';


	END;
END MODULE;